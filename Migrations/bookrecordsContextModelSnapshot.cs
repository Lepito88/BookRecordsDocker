// <auto-generated />
using System;
using BookRecords.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookRecords.Migrations
{
    [DbContext(typeof(bookrecordsContext))]
    partial class bookrecordsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("Idauthor")
                        .HasColumnType("int")
                        .HasColumnName("idauthor");

                    b.Property<int>("Idbook")
                        .HasColumnType("int")
                        .HasColumnName("idbook");

                    b.HasKey("Idauthor", "Idbook")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "Idauthor" }, "fk_author_authorbooks_idx");

                    b.HasIndex(new[] { "Idbook" }, "fk_book_authorbooks_idx");

                    b.ToTable("author_books", (string)null);
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("Idbook")
                        .HasColumnType("int")
                        .HasColumnName("idbook");

                    b.Property<int>("Idcategory")
                        .HasColumnType("int")
                        .HasColumnName("idcategory");

                    b.HasKey("Idbook", "Idcategory")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "Idbook" }, "fk_book_bookcategories_idx");

                    b.HasIndex(new[] { "Idcategory" }, "fk_category_bookcategories_idx");

                    b.ToTable("book_categories", (string)null);
                });

            modelBuilder.Entity("BookRecords.Data.Entities.Author", b =>
                {
                    b.Property<int>("Idauthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idauthor");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("lastname");

                    b.HasKey("Idauthor")
                        .HasName("PRIMARY");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("BookRecords.Data.Entities.Book", b =>
                {
                    b.Property<int>("Idbook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idbook");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("book_name");

                    b.Property<string>("Isbn")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("isbn");

                    b.Property<DateTime?>("ReleaseYear")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("release_year");

                    b.Property<string>("Type")
                        .HasColumnType("enum('Hardcover','Paperback','Digital','Comicbook')")
                        .HasColumnName("type");

                    b.HasKey("Idbook")
                        .HasName("PRIMARY");

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("BookRecords.Data.Entities.Category", b =>
                {
                    b.Property<int>("Idcategory")
                        .HasColumnType("int")
                        .HasColumnName("idcategory");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name");

                    b.HasKey("Idcategory")
                        .HasName("PRIMARY");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("BookRecords.Data.Entities.RefreshToken", b =>
                {
                    b.Property<int>("IdRefreshToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Iduser")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TokenSalt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("IdRefreshToken")
                        .HasName("PRIMARY");

                    b.HasIndex("Iduser");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("BookRecords.Data.Entities.User", b =>
                {
                    b.Property<int>("Iduser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("iduser");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Iduser")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Username" }, "username_UNIQUE")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("UserBook", b =>
                {
                    b.Property<int>("Iduser")
                        .HasColumnType("int")
                        .HasColumnName("iduser");

                    b.Property<int>("Idbook")
                        .HasColumnType("int")
                        .HasColumnName("idbook");

                    b.HasKey("Iduser", "Idbook")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "Idbook" }, "fk_book_userbooks_idx");

                    b.HasIndex(new[] { "Iduser" }, "fk_user_userbooks_idx");

                    b.ToTable("user_books", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookRecords.Data.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("Idauthor")
                        .IsRequired()
                        .HasConstraintName("fk_author_authorbooks");

                    b.HasOne("BookRecords.Data.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("Idbook")
                        .IsRequired()
                        .HasConstraintName("fk_book_authorbooks");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("BookRecords.Data.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("Idbook")
                        .IsRequired()
                        .HasConstraintName("fk_book_bookcategories");

                    b.HasOne("BookRecords.Data.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("Idcategory")
                        .IsRequired()
                        .HasConstraintName("fk_category_bookcategories");
                });

            modelBuilder.Entity("BookRecords.Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("BookRecords.Data.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("Iduser")
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserBook", b =>
                {
                    b.HasOne("BookRecords.Data.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("Idbook")
                        .IsRequired()
                        .HasConstraintName("fk_book_userbooks");

                    b.HasOne("BookRecords.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("Iduser")
                        .IsRequired()
                        .HasConstraintName("fk_user_userbooks");
                });

            modelBuilder.Entity("BookRecords.Data.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
